=====================================================================
=============================shell脚本================================
=====================================================================
1.执行bash命令的4中方式：
    1.  bash 2.sh 会在当前父进程中产生生子进程，脚本执行完毕后，子进程会回到父进程中，不会影响当前环境(子shell)
    2.  ./2.sh 1和2效果相同
    3.  source 2.sh 会在当前父进程中执行，不会产生子进程，会影响当前环境(当前shell)
    4.  . 2.sh 3和4效果相同
2.export 修饰的变量在当前shell和子shell是生效的，在另一个操作窗口是不生效的

3.环境变量的分类：环境变量env | more,预定义变量set | more,位置变量（给shell变量赋值$1,$2,,,,${10},${11}）
--环境变量：
$PATH环境变量是，是命令搜索路径，使用了export修改，所以是对当前shell和当前子shell是生效的
$PS1环境变量，是当前提示的终端[\u@\h \W]\$
--预定义变量：
$?:上一条命令是否正确执行,是否有错误，正确返回0，错误返回非0；条件判断也会使用
$$:当前进程的PID
$0:当前进程的名称
--位置变量：
$1,$2,,,,${10},${11}
技巧：${2}_:表示如果${2}传入的是空值，则取_，如果${2}有值，则会多出一个_；中括号不能省略，所以使用${2-_}

4.环境变量配置文件：
etc下为所有用户通用的配置文件，~家目录下的配置文件，是保存用户特有的配置
logging shell（su - 用户名，一下所有目录都会执行） 和 no logging shell（su 用户名，会执行/etc/bashrc和~/.bashrc）
文件：/etc/profile
目录：/etc/profile.d/
文件：~/.bash_profile
文件：~/.bashrc
文件：/etc/bashrc
su - root配置文件的执行顺序(登录时，建议使用该方法)：/etc/profile
                         ~/.bash-profile
                         ~/.bashrc
                         /etc/bashrc

su root配置文件的执行顺序：~/.bashrc
                       /etc/bashrc
注意：配置文件修改后不会立即生效，需要source /etc/bashrc才会生效
===========================================================
5.数组：
IPTS=(10.0.0.1 10.0.0.2 10.0.0.3)
显示所有的元素
echo ${IPTS[@]}
显示数组元素个数
echo $[#IPTS[@]]
显示数组的第一个元素
echo ${IPTS[0]}
============================================================
6.转义符号\
特殊字符：
#注释：被注释的内容不会被执行
;分号：连接多个命令
\转义字符：\n \r \t \$ \" \\
7.引用符号：
"",不完全引用,会对变量进行转义
'',完全引用,将变量原样输出
``,
============================================================
8.预算符：
赋值运算符：=，可进行算数赋值和字符串赋值
算术运算符：expr 4 + 5，支持+，-，*，/，**平方，%取余，expr支持整数
数字常量：let "变量名=变量值" 等价于 (( a = 10)) 双圆括号的简化
例子：(( a++ ))
例子：echo $(( 10 + 20 ))
============================================================
9.特殊符号大全：
引号：""不完全引用，''完全引用，``执行命令
括号：(),(()),$() 圆括号，单独使用圆括号会产生一个子shell(xyz=123),父shell是无法看到这个变量的；数组的初始化IPS=(ip1 ip2 ip3)；执行命令cmd1=$(ls)
     [],[[]] 方括号，单独使用方括号是测试(test)或数组元素功能，两个方括号表示测试表达式，可以使用>,<[[ 5 > 4 ]]
     <> 尖括号，重定向符号，2> 错误重定向
     {} 花括号，输出范围：echo {0..9}，输出0到9，用在for循环；文件复制：cp -v /etc/passwd{,.bak}（-v复制期间详细输出）《=》 cp /etc/passwd /etc/passwd.bak
     注意：let简写为(())，test简写为[]
     $(ls)用来获取执行命令后的值，``也是用来执行命令的
运算和逻辑符号：加减乘除 && || !
转义符号：
其他符号：#注释符
        ;命令分隔符
        case语句的分隔符要转义;;
        :空指令，占位符
        . 和source命令相同
        ~家目录
        ,分割目录
        *通配符 ls * ; ls ?.sh
        ?条件测试或通配符，只能匹配一个字符
        $取值符号
        |管道符
        &后台运行
         空格
===========================================================
10.测试和判断(0为True，非0为False)
退出程序命令：exit 10 返回10给 shell，返回值非0 为不正常退出
           $? 判断当前shell前一个命令是否正常退出
test命令用于检测文件或比较值：文件测试
                         整数比较测试
                         字符串测试
test测试语句可以简化为[]符号，[]符号还有扩展写法[[]]支持&&、||、<、>
===========================================================
11.if语句
if [ $USER = "root" ];then
        echo "please run"
        if [ -x /root/shellscript2/2.sh ];then
                /root/shellscript2/2.sh
        fi
else
        echo "switch user root"
fi
===========================================================
12.case语句和select语句可以构成分支
case $1 in
        "start"|"START")
                echo $0 "start...."
        ;;
        "stop")
                echo $0 "stop...."
        ;;
        "restart"|"reload")
                echo $0 "restart...."
        ;;
        *)
                echo "Usage:$0 {start|stop|restart|reload}"
        ;;
esac
==============================================================
13.for循环
for i in {1..9}
do
    echo $i
done

for i in `ls *.map3.ma4.mp4`; do mv ./$i $(basename $i .map3.ma4.mp4).mp4; done

awk中会使用到
for ((i=1;i<=10;i++))
do
    echo $i
done
==============================================================
14.while循环
while test测试是否成立
do
    命令
done

a=1
while [ $a -lt 10 ]; do  echo $a;  a=$(expr $a + 1); done
until循环和while循环相反，循环测试为假时，执行循环，为真时循环停止
shift参数左移
while [ $# -ge 1 ]
do
        if [ $1 = "help" ];then
                echo $1 $1
        fi
        # 参数左移
        shift
done
================================================================
15.循环的嵌套，循环中break，continue的使用
for filename in $(ls /etc/profile.d/*.sh); do   if [ -x $filename ];then   echo "可执行文件";  else   echo "不可以执行";  fi; done
================================================================
16.使用循环处理命令行参数
$0代表脚本的名称
$*和$@,代表所有位置参数，$#代表位置参数的数量

例子1：
for pos in $*
do
       if [ "$pos" = "help" ];then
               echo $pos $pos
       fi
done

例子2：
while [ $# -ge 1 ]
do
        if [ "$1" = "help" ];then
                echo $1 $1
        fi
        # 参数左移
        shift
done

====================================================================
17.函数：
1.自定义函数
function fname(){
    //命令
}
或，省略function关键字
fname(){
    //命令
}
2.函数作用范围内的变量：local 变量名
3.函数的参数：$1,$2,$.......$n
#!/bin/bash
#function
checkpid(){
        local i
        for i in $*;
        do
                if [ -d "/proc/$i" ];then
                        return 0
                fi
        done

        return 1
}
=====================================================================
18.系统函数库介绍：
1.系统自建了函数库，可以在脚本中引用：/etc/init.d/functions
2.自建函数库，使用source函数脚本文件导入函数
=====================================================================
19.脚本控制
脚本优先级：避免出现不可控的死循环，死循环导致cpu占用过高，死循环导致死机，（可以使用nice和renice调整脚本优先级）
    fork炸弹<利用函数不停的创建子进程>：创建子进程，通过ulimit -a 查看max user processes
    func() {
        func | func&
    }
    或 func() { func | func& };func
    或 .(){.|.&};.
捕获信号：信号脚本的捕捉
    kill 默认会发送15号信号给信用程序
    ctrl+c发送2号信号给应用程序
    trap "echo sig 15" 15
    trap "echo sig 2" 2

    9号信号不可阻塞<是无法使用trap进行补货的>
=====================================================================
20.计划任务
1.一次性计划任务 at，用ctrl+d提交当前任务，用atq查看当前任务
2.周期性计划任务(任务叠加问题)，每一个用户都有一个自己的cron
    配置方式：
        crontab -e
    查看现有的计划任务：
        crontab -l
    查看任务日志：
        任务保存：more /var/spool/cron/root
        任务日志：tail -1000f /var/log/cron
    配置格式：
        分钟 小时 日期 月份 星期 执行的命令
        * * * * 1-5 /usr/bin/date >> /root/shellscript2/date.txt 星期一到星期五运行该脚本
        * * * * 1,5 /usr/bin/date >> /root/shellscript2/date.txt 星期一,星期五运行该脚本
        * * * * 5 /usr/bin/date >> /root/shellscript2/date.txt 星期五运行该脚本
        * * 7 7 1-5 /usr/bin/date >> /root/shellscript2/date.txt 7月7月，这一天如果是星期一到星期五，那么这一天每分钟都运行
        15 18 7 7 1-5 /usr/bin/date >> /root/shellscript2/date.txt 7月7月，这一天如果是星期一到星期五，那么这一天18:15运行
        30 3 * * 1 /usr/bin/date >> /root/shellscript2/date.txt 每周一凌晨3点30分运行改脚本
        0 3 15 * 0 /usr/bin/date >> /root/shellscript2/date.txt 没有15日凌晨3点运行改脚本<注意：凌晨3点，要将分写为0>
        注意命令的路径问题
3.计划任务加锁 flock <意外情况：3:30分运行计划任务，但是3:25关机，3:35开机，这样就会导致定时任务无法正常运行>
如果计算机不能按照预期时间运行
    anacrontab延时计划任务：
        延时计划任务存放路径：/etc/cron.d/0hourly
    flock锁文件
    flock -xn "/tmp/f.lock" -c "/root/a.sh"
    /tmp/f.lock 锁文件
    /root/a.sh 执行的脚本文件
date命令：显示当前系统的时间<which date>
=====================================================================
=============================文本操作篇================================
=====================================================================
1.正则表达式和文本搜索（注意元字符和通配符的区别）
元字符：.匹配除换行符外的任意单个字符
      *匹配任意一个跟在它前面的字符<通配符*可以单独使用代表所有；元字符*不能单独使用>
      []匹配方括号中的字符类中的任意一个
      ^匹配开发
      $匹配结尾
      \转义后面的特殊字符
扩展字符：+匹配前面的正则表达式至少出现一次
        ?匹配前面的正则表达式出现零次或一次
        |匹配它前面或后面的正则表达式(匹配多个正则表达式)
文件查询命令：find<find 指定目录 -name passwd>
文本内容查找：grep<查找文本当中含有关键字的一行，并将整行的内容返回>
例如：grep password /etc/anaconda-ks.cfg
返回：# Root password

例如：grep pass.... /etc/anaconda-ks.cfg
返回：auth --enableshadow --passalgo=sha512
     # Root password

例如：grep pass....$ /etc/anaconda-ks.cfg
返回：# Root password

例如：grep pass.*$ /etc/anaconda-ks.cfg
返回：auth --enableshadow --passalgo=sha512
     # Root password

例如：grep "\." anaconda-ks.cfg



